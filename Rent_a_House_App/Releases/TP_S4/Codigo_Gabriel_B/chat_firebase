import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:intl/intl.dart';

class FirebaseChatPage extends StatefulWidget {
  const FirebaseChatPage({super.key});

  @override
  State<FirebaseChatPage> createState() => _FirebaseChatPageState();
}

class _FirebaseChatPageState extends State<FirebaseChatPage> {
  final TextEditingController _controller = TextEditingController();
  final DateFormat _formatter = DateFormat('dd/MM/yyyy HH:mm');

  Future<void> _sendMessage() async {
    final text = _controller.text.trim();
    if (text.isEmpty) return;

    await FirebaseFirestore.instance.collection('chat').add({
      'message': text,
      'timestamp': DateTime.now().millisecondsSinceEpoch,
    });

    _controller.clear();
  }

  String _formatTimestamp(int timestamp) {
    return _formatter.format(DateTime.fromMillisecondsSinceEpoch(timestamp));
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text("Chat com Firebase")),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            TextField(
              controller: _controller,
              decoration: InputDecoration(
                labelText: "Digite uma mensagem",
                border: OutlineInputBorder(),
                suffixIcon: IconButton(
                  icon: const Icon(Icons.send),
                  onPressed: _sendMessage,
                ),
              ),
              onSubmitted: (_) => _sendMessage(),
            ),
            const SizedBox(height: 16),
            Expanded(
              child: StreamBuilder<QuerySnapshot>(
                stream: FirebaseFirestore.instance
                    .collection('chat')
                    .orderBy('timestamp', descending: true)
                    .snapshots(),
                builder: (context, snapshot) {
                  if (snapshot.hasError) {
                    return Center(child: Text('Erro: ${snapshot.error}'));
                  } else if (!snapshot.hasData) {
                    return const Center(child: CircularProgressIndicator());
                  }

                  final docs = snapshot.data!.docs;

                  if (docs.isEmpty) {
                    return const Center(child: Text("Nenhuma mensagem ainda"));
                  }

                  return ListView.builder(
                    itemCount: docs.length,
                    itemBuilder: (context, index) {
                      final data = docs[index].data() as Map<String, dynamic>;
                      final text = data['message'] ?? '';
                      final timestamp = data['timestamp'] ?? 0;

                      return ListTile(
                        title: Text(text),
                        subtitle: Text(_formatTimestamp(timestamp)),
                      );
                    },
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }
}
